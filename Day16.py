puzzle_input = r'''\.............\................\....\..../....\/...............................\...-..........-.\.-....../....
|\......../|....\..............-\............./...........................-..........-......\........\........
.......||......../....-./.../-...|.|..-......-.|....../................\............|...................-..|..
........./......-.............-\......................|.\./.......|........./......-......../..-.........|....
....../....................-............................................../...../...|.........................
....................\....|/............................./.......-....|......../..........................\....
.|....../|.........-......|.............\..|..................|......../.................|.|............-.|...
.....-............\\............\................/......-.........\................\..|../....................
............|..|.......|......../................\.......................|../....../......./.....|............
.\...........\..\.............../.........-/....|......................./.....-./-.........../-........-......
|................\.\-.............../..-............./........./.................\.............|...-.....-....
.........-....|..|......................................\.||...-../..|............../...../.../.........-.....
.....-....-\.................|...........|../.....\...............................|...../../|.................
.\......\......................\....../.../.....-.../.........................../..|...........|..\...........
-............|.........-.-........-.........................|...\...-...........\.|...-....../..........|.....
.........-.......|......\.....\..-...../..../.....\.../............/..........-......./....../...........\.../
..............\........................|.............................-../......-..-...../..................\..
.....\......-.......-.......-......../../../........\.......-..........|......./........................../...
.\...\...................|./\|.-..\...............................\..\.....-....|......................./.....
.................-...|....|.../...../.|.||.....-.|............................-..............\................
........................................../.......................|........\......../.../..............|.....\
.......\......./............................./........../../..........................-\..................|...
...........-...|..\..........-.........\.................././................|./.......|............../.......
......./..................................\...-.........\........\....../............................\......\-
-.|..-|...............|..........................\..........|.-.........\............-.|.............\.....|..
.............................../..............-.....-.......-........................|.......-................
.........\.........-.........|...../......../......./....-...\...................\........\...................
..........\.........\........../...|.................|./...\.......\..........-...............................
./...................|........../\......../....................|..-...........\...\...........|..............|
.....|...........\-.\.......-..........................-....-...................|....|.|...............-......
.|.././......................|.......|.......|..............\...../.................../.\...-.................
...........-........./....|.................|..-.....-............./...................................-..../.
...................\/..|.....-............../-......-..........|........................./...\....-|....|-....
........................./..-..|.\-...............-......-/...../.......\..|................-...\.|.....\.....
\...../.........................../....................-..........|........../..-..-.......\........../.././|.
........................../...\|..................................................../...|.-........-.....|..\.
....\.............................|./.....|...../....\.............\...../.......-...............\..-..../....
.........-.........................|................|........\/.\-...................\..-......./../..........
...-.../............/.................-..........\....../............../...../..........|.....................
..........\...\..................|...-......\\......./...-.............-\.................|...../......\......
/..\/.............\....\.............\.......................................|.....\....-............\........
....../..\.|................................\.........../.......-.......-/.....|...................-.....-....
........-....|.............................|....../...............\.......................--..................
................/......|.........-....................-..............|.......................................|
.........\........|...........................\.............|.............................../.................
...|..\....-......../.\...-............................................................/....-...../...........
.............\\\.../...../.../..........\..............\...........\........................|....../.........\
......-..............|..-..|....-\..\..-...-............\.................\...-.\/.....\......-.\....--.../...
........./...................../...../..|...\.\/.........\.../........................................\.../-..
........\.......|.......|\..|........../..../\........../........\..../..............././..../.............-.\
........................|-............|............................./.-.|...|............../....-\............
../........-.../....................|....................-/.............../.....-...........-....\......||....
.....\..|.....-|../....|./....-|.......-...../..-..\..............\...................../.................|...
...-......../.\...........\.........\../.....|............\..................../.........\................/.\/
...../...|............-..\.../............/............-..............--.-..........././............-........|
.....|...........\.....-...\..../.....-........-.....\.|..............\....-............./...../..............
....\.....-.|....\..../..............\|../.........../......|....\/.......................|............|....-.
........|..--..............|..............-........|.......|.-.........\.............-...........\............
./.||....\......./....\./........../...........././....\.................../..................\...../.........
.......|..\...-.\..\..|.........../..................................-....|........\......|....|..............
...|..........|.........-...............|...............................-.......|...........-..\.......\......
.\.........../../............................-..|...\.....-.........../......-|.../.....|.................-...
........|....../..\..\|..|......|.........|...............................\../.....\....-/........-...........
.................................................\.......|........|.\.-....../.......|.......|............\...
.......|.......\.......|.........|......-......|...|...\.............\.............|/.........................
..........|....................|..........\..........-......./................................................
...../.......|....................|......................././.................................................
........\.............|........--..........\.............../......|...................../............|..\.....
....-............|.........|....|.-.\../-...\....-...-................\|..\-.......|........-............../..
................/........\.....\.....././....|....................-...............\...........-......\........
.\.....|......|...|\......\.\/....\.............-............\.....\.......-...-........-....//..../.....|..-.
..................|..|.-.................../\...........|..../..........\|.....-..|.../.......................
-......-......./........./../.............../..................-..\.......\............|...../../....../......
....../............/...........\.............\............./.........../.......\......|....|.........../......
...\........|..................|............-............-.....-..\..-................/........../........||..
......../..|..-../..../......................../.........\./.-................../...................-.........
.../....|....\.......-..\..........-....\.............|\........../...............-........|..................
..............\.............\|.........-......................-........\|......./.......-.................|...
/..../...-||\-...|\...............................\.......................\.............-................-....
.......-..-....|..................|..............................................................///...-.../.|
......|.......-/........-.-......|....\..-...|...........\...........\.....................-..../.........../.
......-...........|-..\.......|...|.\|.................-....\...................\.\........\.\./.........\....
....../............../.........|...|.......|..../.............................................................
.........../...................-./...\..........\-............./...........\.../.....|......................-.
/..../..../........................................|.\......-/......./....\.........................-......|..
.\./.|.-..........................|...|...........|....../....-....../|...............\..............\...-....
....|...\..........|......-..................|........../..|.-...\........./........|................|........
...\....\........../........../.........\..............-...........................-.|...../..........\.......
...|...........-...........................\........-.........................\...-..-.....\.......|........-.
......\|...........................\.....................................-............/....\...........|......
................../............-........................\.................................................-...
.../....|...............|....................../\.........|....................\....|............\.........|-.
.......................................|....-.........../....\-........|......./............-..|.............\
/.........\..\.........|...............\.......\........./................\....................|.....|........
..................................|.....|.-..|.../......................../-\......|..........................
.................|.....................................................-............|.....|..../.\/..........|
.......\....\....-........|.|..../......-......\...../....................-...........\............-..........
....-.................................-..........-......-................................../.........-\...|...
.....................|......................|.........-............../.../.....-........\.....................
.\./..........-.\...\||................./../........\.........|...\........\....\.\...............-|......|...
..\......//.........../.\........\......|......|........\......\.....-..........|.-..|...../|.................
/.....................\.................-........|...................\.....-..............-/.....\..|../../...
...|..-.../............./.|.................../............/..\...........-....|-............\.......--.......
..............\..\/.....\.........|.\.........................|............|........./................./-..|-.
...........................-.................../...................|\..........\/..|.-........................
.....-.............................../....................\.........|......................|..................
..................\.........../...........\..\/.........|...........|..-........|....\..........-...../.|.....
..........|.......\..\...........\.../......................-...........-.....-........../\|..................
....../.......-........................\|...//...\..-......\.......|..\....................-..........\..-....
|./....|........-./........../.\...\.....|../..../.......-........../.\.....-.................................
'''

# puzzle_input = r'''.|...\....
# |.-.\.....
# .....|-...
# ........|.
# ..........
# .........\
# ..../.\\..
# .-.-/..|..
# .|....-|.\
# ..//.|....'''

# Each tile has 5 proprieties: [value direction_set]
# The value is the same as puzzle input, and directions is a set 
# indicating from where a beam was already coming
VALUE = 0
SET = 1
tile_map = []
for line in puzzle_input.splitlines():
  tile_row = []
  for v in line:
    tile_value = [v,set()]
    tile_row.append(tile_value)
  tile_map.append(tile_row)

# Each beam has 3 properties: [row column direction]
ROW = 0
COLUMN = 1
DIRECTION = 2

# direction can be 1 (up), 2 (down), 3 (left) or 4 (right)
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4
# We start with a single beam at (ROW,COLUMN) = (0,0) going to RIGHT direction
first_beam = [0,0,RIGHT]
beam_list = [first_beam]

# So we mark this tile as it was previously visited from a tile coming from it's LEFT
tile_map[0][0][SET].add(RIGHT)

# Continue to process all the beam path while there are valid beams
def process_beams():
  while len(beam_list) > 0:
    beam_to_remove = list()
    beam_to_add = list()
    for beam in beam_list:
      # If the beam was going UP
      if beam[DIRECTION] == UP:
        # If we can't go UP anymore
        if beam[ROW] <= 0:
          # Then we can remove this beam
          if beam not in beam_to_remove:
            beam_to_remove.append(beam)
        else:
          # Move the beam UP
          beam[ROW] -= 1
          # This is the new tile where is this beam
          tile = tile_map[beam[ROW]][beam[COLUMN]]
          # If there was already a beam going UP in this tile
          if( UP in tile[SET] ):
            # We can remove this beam, it's redundant
            if beam not in beam_to_remove:
              beam_to_remove.append(beam)
          else:
            # Now we add a beam going up in this tile
            tile[SET].add(UP)
            # If it's a tile that reflects to the LEFT
            if( tile[VALUE] == '\\' ):
              # Turn the beam to the LEFT
              beam[DIRECTION] = LEFT
            # If it's a tile that reflects to the RIGHT
            elif( tile[VALUE] == '/' ):
              # Turn the beam to the RIGHT
              beam[DIRECTION] = RIGHT
            # If it's a splitter (for a beam that it's going UP <-> DOWN)
            elif( tile[VALUE] == '-'):
              split_beam = beam[:]
              # Turn the original beam to the LEFT
              beam[DIRECTION] = LEFT
              # Turn the new beam to the RIGHT
              split_beam[DIRECTION] = RIGHT
              # Add this new beam to the list
              if split_beam not in beam_to_add:
                beam_to_add.append(split_beam)
      # If the beam was going DOWN
      elif beam[DIRECTION] == DOWN:
        # If we can't go DOWN anymore
        if beam[ROW] >= (len(tile_map)-1):
          # Then we can remove this beam
          if beam not in beam_to_remove:
            beam_to_remove.append(beam)
        else:
          # Move the beam DOWN
          beam[ROW] += 1
          # This is the new tile where is this beam
          tile = tile_map[beam[ROW]][beam[COLUMN]]
          # If there was already a beam going DOWN in this tile
          if( DOWN in tile[SET] ):
            # We can remove this beam, it's redundant
            if beam not in beam_to_remove:
              beam_to_remove.append(beam)
          else:
            # Now we add a beam going DOWN in this tile
            tile[SET].add(DOWN)
            # If it's a tile that reflects to the RIGHT
            if( tile[VALUE] == '\\' ):
              # Turn the beam to the RIGHT
              beam[DIRECTION] = RIGHT
            # If it's a tile that reflects to the LEFT
            elif( tile[VALUE] == '/' ):
              # Turn the beam to the LEFT
              beam[DIRECTION] = LEFT
            # If it's a splitter (for a beam that it's going UP <-> DOWN)
            elif( tile[VALUE] == '-'):
              split_beam = beam[:]
              # Turn the original beam to the LEFT
              beam[DIRECTION] = LEFT
              # Turn the new beam to the RIGHT
              split_beam[DIRECTION] = RIGHT
              # Add this new beam to the list
              if split_beam not in beam_to_add:
                beam_to_add.append(split_beam)
      # If the beam was going LEFT
      elif beam[DIRECTION] == LEFT:
        # If we can't go LEFT anymore
        if beam[COLUMN] <= 0:
          # Then we can remove this beam
          if beam not in beam_to_remove:
            beam_to_remove.append(beam)
        else:
          # Move the beam LEFT
          beam[COLUMN] -= 1
          # This is the new tile where is this beam
          tile = tile_map[beam[ROW]][beam[COLUMN]]
          # If there was already a beam going LEFT in this tile
          if( LEFT in tile[SET] ):
            # We can remove this beam, it's redundant
            if beam not in beam_to_remove:
              beam_to_remove.append(beam)
          else:
            # Now we add a beam going LEFT in this tile
            tile[SET].add(LEFT)
            # If it's a tile that reflects UP
            if( tile[VALUE] == '\\' ):
              # Turn the beam UP
              beam[DIRECTION] = UP
            # If it's a tile that reflects DOWN
            elif( tile[VALUE] == '/' ):
              # Turn the beam DOWN
              beam[DIRECTION] = DOWN
            # If it's a splitter (for a beam that it's going LEFT <-> RIGHT)
            elif( tile[VALUE] == '|'):
              split_beam = beam[:]
              # Turn the original beam UP
              beam[DIRECTION] = UP
              # Turn the new beam DOWN
              split_beam[DIRECTION] = DOWN
              # Add this new beam to the list
              if split_beam not in beam_to_add:
                beam_to_add.append(split_beam)
      # If the beam was going RIGHT
      elif beam[DIRECTION] == RIGHT:
        # If we can't go RIGHT anymore
        if beam[COLUMN] >= len(tile_map[0])-1:
          # Then we can remove this beam
          if beam not in beam_to_remove:
            beam_to_remove.append(beam)
        else:
          # Move the beam RIGHT
          beam[COLUMN] += 1
          # This is the new tile where is this beam
          tile = tile_map[beam[ROW]][beam[COLUMN]]
          # If there was already a beam going RIGHT in this tile
          if( RIGHT in tile[SET] ):
            # We can remove this beam, it's redundant
            if beam not in beam_to_remove:
              beam_to_remove.append(beam)
          else:
            # Now we add a beam going RIGHT in this tile
            tile[SET].add(RIGHT)
            # If it's a tile that reflects DOWN
            if( tile[VALUE] == '\\' ):
              # Turn the beam DOWN
              beam[DIRECTION] = DOWN
            # If it's a tile that reflects UP
            elif( tile[VALUE] == '/' ):
              # Turn the beam UP
              beam[DIRECTION] = UP
            # If it's a splitter (for a beam that it's going LEFT <-> RIGHT)
            elif( tile[VALUE] == '|'):
              split_beam = beam[:]
              # Turn the original beam UP
              beam[DIRECTION] = UP
              # Turn the new beam DOWN
              split_beam[DIRECTION] = DOWN
              # Add this new beam to the list
              if split_beam not in beam_to_add:
                beam_to_add.append(split_beam)
      
    # Now we have processed all the beams. Let's remove and add as needed.
    for beam in beam_to_add:
      if beam not in beam_list:
        beam_list.append(beam)
    for beam in beam_to_remove:
      if beam in beam_list:
        beam_list.remove(beam)
    
process_beams()

# We know that if a tile was visited at least once, it's energized
def count_energized():
  count = 0
  for tile_row in tile_map:
    for tile in tile_row:
      if len(tile[SET]) > 0:
        count += 1
  return count

energized = count_energized()

      
print(f"Part One: {energized}")

max_energized = 0

# Testing several start points
for r in range(len(tile_map)):
  # Reset map and beam list
  tile_map = []
  for line in puzzle_input.splitlines():
    tile_row = []
    for v in line:
      tile_value = [v,set()]
      tile_row.append(tile_value)
    tile_map.append(tile_row)
  # We start with a single beam at (ROW,COLUMN) = (r,0) going to RIGHT direction
  first_beam = [r,0,RIGHT]
  beam_list = [first_beam]
  tile_map[r][0][SET].add(RIGHT)
  
  process_beams()
  max_energized = max(max_energized, count_energized())
  
  # Reset map and beam list
  tile_map = []
  for line in puzzle_input.splitlines():
    tile_row = []
    for v in line:
      tile_value = [v,set()]
      tile_row.append(tile_value)
    tile_map.append(tile_row)
  # We start with a single beam at (ROW,COLUMN) = (last_row,0) going to LEFT direction
  first_beam = [len(tile_map[0])-1,0,LEFT]
  beam_list = [first_beam]
  tile_map[len(tile_map[0])-1][0][SET].add(LEFT)
  process_beams()
  max_energized = max(max_energized, count_energized())
  
for c in range(len(tile_map[0])):
  # Reset map and beam list
  tile_map = []
  for line in puzzle_input.splitlines():
    tile_row = []
    for v in line:
      tile_value = [v,set()]
      tile_row.append(tile_value)
    tile_map.append(tile_row)
  # We start with a single beam at (ROW,COLUMN) = (0,c) going to DOWN direction
  first_beam = [0,c,DOWN]
  beam_list = [first_beam]
  tile_map[0][c][SET].add(DOWN)
  
  process_beams()
  max_energized = max(max_energized, count_energized())
  
  # Reset map and beam list
  tile_map = []
  for line in puzzle_input.splitlines():
    tile_row = []
    for v in line:
      tile_value = [v,set()]
      tile_row.append(tile_value)
    tile_map.append(tile_row)
  # We start with a single beam at (ROW,COLUMN) = (last_row,c) going to UP direction
  first_beam = [len(tile_map)-1,c,UP]
  beam_list = [first_beam]
  tile_map[len(tile_map)-1][c][SET].add(UP)
  
  process_beams()
  max_energized = max(max_energized, count_energized())
  
print(f"Part Two: {max_energized}")
# 11439: Too High